#!/usr/bin/env ruby

require 'rubygems'

Dir.chdir(File.join(File.expand_path(File.dirname(__FILE__)), "..")) do
  require 'bundler/setup'

  require 'bunny'

  $:.unshift(File.expand_path('./lib'))
  require 'opscode/expander'
  require 'opscode/expander/version'
  require 'opscode/expander/configuration'

  include Opscode

  Expander.init_config([])

  config = {:warn => 100, :crit => 200}

  option_parser = OptionParser.new do |o|
    o.banner = "Usage: check_queue_size [options]"

    o.on('-w', '--warn WARN_THRESHOLD', 'number of messages to trigger a warning') do |i|
      config[:warn] = i.to_i
    end

    o.on('-c', '--critical CRITICAL_THRESHOLD', 'the number of messages to trigger a critical') do |n|
      config[:crit] = n.to_i
    end

    o.on_tail('-h', '--help', 'show this message') do
      puts "opscode-expander #{VERSION}"
      puts "queue size monitor"
      puts ''
      puts o
      exit 127
    end
  end

  option_parser.parse!(ARGV.dup)

  message_counts = []

  begin
    amqp_client = Bunny.new(Expander.config.amqp_config)
    amqp_client.start

    0.upto(Expander::VNODES - 1) do |vnode|
      q = amqp_client.queue("vnode-#{vnode}", :durable => true)
      message_counts << q.status[:message_count]
    end
    total_messages = message_counts.inject(:+)

    if total_messages >= config[:crit]
      puts "Opscode Expander Queue Size CRITICAL - messages: #{total_messages}"
      exit(2)
    elsif total_messages >= config[:warn]
      puts "Opscode Expander Queue Size WARNING - messages: #{total_messages}"
      exit(1)
    else
      puts "Opscode Expander Queue Size OK - messages: #{total_messages}"
      exit(0)
    end

  ensure
    amqp_client.stop if defined?(amqp_client) && amqp_client && amqp_client.connected?
  end
  
end
